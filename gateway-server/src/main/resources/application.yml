spring:
  application:
    name: gateway-server
  zipkin:
    baseUrl: http://localhost:9411/
  cloud:
    gateway:
      discovery:
        locator:
          enabled: true
      routes:
      ## 路由组ID,唯一
      - id: service-order
        ## 断言
        predicates:
        # 只有符合这个规则的请求才会走这个路由
        # 注意Path大小写
        - Path=/order/**
        ## 转发地址
        # lb = Load Balance，代表负载均衡；
        # ws = WebSocket，代表使用Spring Web Socket的基础架构去转发WebSocket请求
        # uri-1:  http://www.baidu.com   --> 协议为http，转发至http地址，使用Netty的HttpClient转发请求
        # uri-2:  https://www.baidu.com  --> 协议为https，转发至https地址，使用Netty的HttpClient转发请求
        # uri-3:  lb://serviceId         --> 从eureka注册中心，根据serviceId获取服务地址，并做负载均衡，使用Netty的HttpClient转发请求
        # uri-4:  lb:ws://serviceId      --> 从eureka注册中心，根据serviceId获取服务地址，并做负载均衡，使用Spring Web Socket的基础架构去转发请求
        uri: lb://service-order
#        order: 0
      ## 路由组ID,唯一
      - id: service-order-2
        predicates:
        - Path=/my-order/**
        uri: lb://service-order
        ## 请求转发前的filter过滤器
        filters:
        # 不配置StripPrefix http://localhost:8081/my-order/order/2 转发至 http://service-order/my-order/order/2
        # 配置StripPrefix=1 http://localhost:8081/my-order/order/2 转发至 http://service-order/order/2
        - StripPrefix=1
        - name: RequestRateLimiter
          args:
            # 用于限流的键的解析器的 Bean 对象的名字。它使用 SpEL 表达式根据#{@beanName}从 Spring 容器中获取 Bean 对象。
            key-resolver: '#{@hostAddressKeyResolver}'
            # 令牌桶每秒填充平均速率。
            redis-rate-limiter.replenishRate: 1
            # 令牌桶总容量
            redis-rate-limiter.burstCapacity: 2
      - id: service-stock
        predicates:
        - Path=/stock/**
        uri: lb://service-stock
      - id: service-score
        predicates:
        - Path=/score/**
        uri: lb://service-score
  redis:
    database: 1
    host: 10.126.42.16
    port: 26379

eureka:
  client:
    serviceUrl:
      defaultZone: http://127.0.0.1:9091/eureka/,http://127.0.0.1:9092/eureka/,http://127.0.0.1:9093/eureka/